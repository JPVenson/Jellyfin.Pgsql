// <auto-generated />
using System;
using Jellyfin.Database.Implementations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jellyfin.Plugin.Pgsql.Migrations
{
    [DbContext(typeof(JellyfinDbContext))]
    [Migration("20250618214615_PgSQL_Init")]
    partial class PgSQL_Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.AccessSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<double>("EndHour")
                        .HasColumnType("double precision");

                    b.Property<double>("StartHour")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessSchedules");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ItemId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("LogSeverity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Overview")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<string>("ShortOverview")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DateCreated");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.AncestorId", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentItemId")
                        .HasColumnType("uuid");

                    b.HasKey("ItemId", "ParentItemId");

                    b.HasIndex("ParentItemId");

                    b.ToTable("AncestorIds");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.AttachmentStreamInfo", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Codec")
                        .HasColumnType("text");

                    b.Property<string>("CodecTag")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.HasKey("ItemId", "Index");

                    b.ToTable("AttachmentStreamInfos");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Album")
                        .HasColumnType("text");

                    b.Property<string>("AlbumArtists")
                        .HasColumnType("text");

                    b.Property<string>("Artists")
                        .HasColumnType("text");

                    b.Property<int?>("Audio")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("CleanName")
                        .HasColumnType("text");

                    b.Property<float?>("CommunityRating")
                        .HasColumnType("real");

                    b.Property<float?>("CriticRating")
                        .HasColumnType("real");

                    b.Property<string>("CustomRating")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateLastMediaAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateLastRefreshed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateLastSaved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EpisodeTitle")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalSeriesId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ExtraIds")
                        .HasColumnType("text");

                    b.Property<int?>("ExtraType")
                        .HasColumnType("integer");

                    b.Property<string>("ForcedSortName")
                        .HasColumnType("text");

                    b.Property<string>("Genres")
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("IndexNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("InheritedParentalRatingSubValue")
                        .HasColumnType("integer");

                    b.Property<int?>("InheritedParentalRatingValue")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInMixedFolder")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMovie")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSeries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualItem")
                        .HasColumnType("boolean");

                    b.Property<float?>("LUFS")
                        .HasColumnType("real");

                    b.Property<string>("MediaType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float?>("NormalizationGain")
                        .HasColumnType("real");

                    b.Property<string>("OfficialRating")
                        .HasColumnType("text");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ParentIndexNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("PreferredMetadataCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("PreferredMetadataLanguage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PremiereDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PresentationUniqueKey")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryVersionId")
                        .HasColumnType("text");

                    b.Property<string>("ProductionLocations")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("integer");

                    b.Property<long?>("RunTimeTicks")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("SeasonName")
                        .HasColumnType("text");

                    b.Property<Guid?>("SeriesId")
                        .HasColumnType("uuid");

                    b.Property<string>("SeriesName")
                        .HasColumnType("text");

                    b.Property<string>("SeriesPresentationUniqueKey")
                        .HasColumnType("text");

                    b.Property<string>("ShowId")
                        .HasColumnType("text");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("SortName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Studios")
                        .HasColumnType("text");

                    b.Property<string>("Tagline")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<Guid?>("TopParentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TotalBitrate")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnratedType")
                        .HasColumnType("text");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path");

                    b.HasIndex("PresentationUniqueKey");

                    b.HasIndex("TopParentId", "Id");

                    b.HasIndex("Type", "TopParentId", "Id");

                    b.HasIndex("Type", "TopParentId", "PresentationUniqueKey");

                    b.HasIndex("Type", "TopParentId", "StartDate");

                    b.HasIndex("Id", "Type", "IsFolder", "IsVirtualItem");

                    b.HasIndex("MediaType", "TopParentId", "IsVirtualItem", "PresentationUniqueKey");

                    b.HasIndex("Type", "SeriesPresentationUniqueKey", "IsFolder", "IsVirtualItem");

                    b.HasIndex("Type", "SeriesPresentationUniqueKey", "PresentationUniqueKey", "SortName");

                    b.HasIndex("IsFolder", "TopParentId", "IsVirtualItem", "PresentationUniqueKey", "DateCreated");

                    b.HasIndex("Type", "TopParentId", "IsVirtualItem", "PresentationUniqueKey", "DateCreated");

                    b.ToTable("BaseItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            IsFolder = false,
                            IsInMixedFolder = false,
                            IsLocked = false,
                            IsMovie = false,
                            IsRepeat = false,
                            IsSeries = false,
                            IsVirtualItem = false,
                            Name = "This is a placeholder item for UserData that has been detacted from its original item",
                            Type = "PLACEHOLDER"
                        });
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemImageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Blurhash")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("ImageType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("BaseItemImageInfos");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemMetadataField", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BaseItemMetadataFields");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemProvider", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemId", "ProviderId");

                    b.HasIndex("ProviderId", "ProviderValue", "ItemId");

                    b.ToTable("BaseItemProviders");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemTrailerType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BaseItemTrailerTypes");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Chapter", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChapterIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ImageDateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("StartPositionTicks")
                        .HasColumnType("bigint");

                    b.HasKey("ItemId", "ChapterIndex");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.CustomItemDisplayPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ItemId", "Client", "Key")
                        .IsUnique();

                    b.ToTable("CustomItemDisplayPreferences");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.DisplayPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChromecastVersion")
                        .HasColumnType("integer");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("DashboardTheme")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("EnableNextVideoInfoOverlay")
                        .HasColumnType("boolean");

                    b.Property<int?>("IndexBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("ScrollDirection")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowBackdrop")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowSidebar")
                        .HasColumnType("boolean");

                    b.Property<int>("SkipBackwardLength")
                        .HasColumnType("integer");

                    b.Property<int>("SkipForwardLength")
                        .HasColumnType("integer");

                    b.Property<string>("TvHome")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ItemId", "Client")
                        .IsUnique();

                    b.ToTable("DisplayPreferences");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.HomeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayPreferencesId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DisplayPreferencesId");

                    b.ToTable("HomeSection");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ImageInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ImageInfos");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ItemDisplayPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int?>("IndexBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RememberIndexing")
                        .HasColumnType("boolean");

                    b.Property<bool>("RememberSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("SortBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ItemDisplayPreferences");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ItemValue", b =>
                {
                    b.Property<Guid>("ItemValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CleanValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemValueId");

                    b.HasIndex("Type", "CleanValue");

                    b.HasIndex("Type", "Value")
                        .IsUnique();

                    b.ToTable("ItemValues");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ItemValueMap", b =>
                {
                    b.Property<Guid>("ItemValueId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("ItemValueId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemValuesMap");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.KeyframeData", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<long[]>("KeyframeTicks")
                        .HasColumnType("bigint[]");

                    b.Property<long>("TotalDuration")
                        .HasColumnType("bigint");

                    b.HasKey("ItemId");

                    b.ToTable("KeyframeData");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.MediaSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("EndTicks")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("SegmentProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StartTicks")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MediaSegments");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.MediaStreamInfo", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("StreamIndex")
                        .HasColumnType("integer");

                    b.Property<string>("AspectRatio")
                        .HasColumnType("text");

                    b.Property<float?>("AverageFrameRate")
                        .HasColumnType("real");

                    b.Property<int?>("BitDepth")
                        .HasColumnType("integer");

                    b.Property<int?>("BitRate")
                        .HasColumnType("integer");

                    b.Property<int?>("BlPresentFlag")
                        .HasColumnType("integer");

                    b.Property<string>("ChannelLayout")
                        .HasColumnType("text");

                    b.Property<int?>("Channels")
                        .HasColumnType("integer");

                    b.Property<string>("Codec")
                        .HasColumnType("text");

                    b.Property<string>("CodecTag")
                        .HasColumnType("text");

                    b.Property<string>("CodecTimeBase")
                        .HasColumnType("text");

                    b.Property<string>("ColorPrimaries")
                        .HasColumnType("text");

                    b.Property<string>("ColorSpace")
                        .HasColumnType("text");

                    b.Property<string>("ColorTransfer")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("DvBlSignalCompatibilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("DvLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("DvProfile")
                        .HasColumnType("integer");

                    b.Property<int?>("DvVersionMajor")
                        .HasColumnType("integer");

                    b.Property<int?>("DvVersionMinor")
                        .HasColumnType("integer");

                    b.Property<int?>("ElPresentFlag")
                        .HasColumnType("integer");

                    b.Property<bool?>("Hdr10PlusPresentFlag")
                        .HasColumnType("boolean");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAnamorphic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAvc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForced")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsHearingImpaired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInterlaced")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyFrames")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<float?>("Level")
                        .HasColumnType("real");

                    b.Property<string>("NalLengthSize")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("PixelFormat")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<float?>("RealFrameRate")
                        .HasColumnType("real");

                    b.Property<int?>("RefFrames")
                        .HasColumnType("integer");

                    b.Property<int?>("Rotation")
                        .HasColumnType("integer");

                    b.Property<int?>("RpuPresentFlag")
                        .HasColumnType("integer");

                    b.Property<int?>("SampleRate")
                        .HasColumnType("integer");

                    b.Property<int>("StreamType")
                        .HasColumnType("integer");

                    b.Property<string>("TimeBase")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("ItemId", "StreamIndex");

                    b.HasIndex("StreamIndex");

                    b.HasIndex("StreamType");

                    b.HasIndex("StreamIndex", "StreamType");

                    b.HasIndex("StreamIndex", "StreamType", "Language");

                    b.ToTable("MediaStreamInfos");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.People", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.PeopleBaseItemMap", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PeopleId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("ItemId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("ItemId", "ListOrder");

                    b.HasIndex("ItemId", "SortOrder");

                    b.ToTable("PeopleBaseItemMap");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Permission_Permissions_Guid")
                        .HasColumnType("uuid");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Kind")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Preference_Preferences_Guid")
                        .HasColumnType("uuid");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Kind")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Security.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Security.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("AccessToken", "DateLastActivity");

                    b.HasIndex("DeviceId", "DateLastActivity");

                    b.HasIndex("UserId", "DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Security.DeviceOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomName")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("DeviceOptions");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.TrickplayInfo", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("Bandwidth")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<int>("ThumbnailCount")
                        .HasColumnType("integer");

                    b.Property<int>("TileHeight")
                        .HasColumnType("integer");

                    b.Property<int>("TileWidth")
                        .HasColumnType("integer");

                    b.HasKey("ItemId", "Width");

                    b.ToTable("TrickplayInfos");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioLanguagePreference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AuthenticationProviderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CastReceiverId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("DisplayCollectionsView")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayMissingEpisodes")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAutoLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLocalPassword")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNextEpisodeAutoPlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableUserPreferenceAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePlayedInLatest")
                        .HasColumnType("boolean");

                    b.Property<long>("InternalId")
                        .HasColumnType("bigint");

                    b.Property<int>("InvalidLoginAttemptCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LoginAttemptsBeforeLockout")
                        .HasColumnType("integer");

                    b.Property<int>("MaxActiveSessions")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxParentalRatingScore")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxParentalRatingSubScore")
                        .HasColumnType("integer");

                    b.Property<bool>("MustUpdatePassword")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<string>("PasswordResetProviderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("PlayDefaultAudioTrack")
                        .HasColumnType("boolean");

                    b.Property<bool>("RememberAudioSelections")
                        .HasColumnType("boolean");

                    b.Property<bool>("RememberSubtitleSelections")
                        .HasColumnType("boolean");

                    b.Property<int?>("RemoteClientBitrateLimit")
                        .HasColumnType("integer");

                    b.Property<long>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<string>("SubtitleLanguagePreference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SubtitleMode")
                        .HasColumnType("integer");

                    b.Property<int>("SyncPlayAccess")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.UserData", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomDataKey")
                        .HasColumnType("text");

                    b.Property<int?>("AudioStreamIndex")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastPlayedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Likes")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayCount")
                        .HasColumnType("integer");

                    b.Property<long>("PlaybackPositionTicks")
                        .HasColumnType("bigint");

                    b.Property<bool>("Played")
                        .HasColumnType("boolean");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("RetentionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SubtitleStreamIndex")
                        .HasColumnType("integer");

                    b.HasKey("ItemId", "UserId", "CustomDataKey");

                    b.HasIndex("UserId");

                    b.HasIndex("ItemId", "UserId", "IsFavorite");

                    b.HasIndex("ItemId", "UserId", "LastPlayedDate");

                    b.HasIndex("ItemId", "UserId", "PlaybackPositionTicks");

                    b.HasIndex("ItemId", "UserId", "Played");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.AccessSchedule", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", null)
                        .WithMany("AccessSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.AncestorId", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("Parents")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "ParentItem")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.AttachmentStreamInfo", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemImageInfo", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemMetadataField", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("LockedFields")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemProvider", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("Provider")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemTrailerType", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("TrailerTypes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Chapter", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("Chapters")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.DisplayPreferences", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", null)
                        .WithMany("DisplayPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.HomeSection", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.DisplayPreferences", null)
                        .WithMany("HomeSections")
                        .HasForeignKey("DisplayPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ImageInfo", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", null)
                        .WithOne("ProfileImage")
                        .HasForeignKey("Jellyfin.Database.Implementations.Entities.ImageInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ItemDisplayPreferences", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", null)
                        .WithMany("ItemDisplayPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ItemValueMap", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("ItemValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.Database.Implementations.Entities.ItemValue", "ItemValue")
                        .WithMany("BaseItemsMap")
                        .HasForeignKey("ItemValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemValue");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.KeyframeData", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.MediaStreamInfo", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("MediaStreams")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.PeopleBaseItemMap", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("Peoples")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.Database.Implementations.Entities.People", "People")
                        .WithMany("BaseItems")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Permission", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Preference", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", null)
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.Security.Device", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.UserData", b =>
                {
                    b.HasOne("Jellyfin.Database.Implementations.Entities.BaseItemEntity", "Item")
                        .WithMany("UserData")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jellyfin.Database.Implementations.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.BaseItemEntity", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Children");

                    b.Navigation("Images");

                    b.Navigation("ItemValues");

                    b.Navigation("LockedFields");

                    b.Navigation("MediaStreams");

                    b.Navigation("Parents");

                    b.Navigation("Peoples");

                    b.Navigation("Provider");

                    b.Navigation("TrailerTypes");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.DisplayPreferences", b =>
                {
                    b.Navigation("HomeSections");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.ItemValue", b =>
                {
                    b.Navigation("BaseItemsMap");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.People", b =>
                {
                    b.Navigation("BaseItems");
                });

            modelBuilder.Entity("Jellyfin.Database.Implementations.Entities.User", b =>
                {
                    b.Navigation("AccessSchedules");

                    b.Navigation("DisplayPreferences");

                    b.Navigation("ItemDisplayPreferences");

                    b.Navigation("Permissions");

                    b.Navigation("Preferences");

                    b.Navigation("ProfileImage");
                });
#pragma warning restore 612, 618
        }
    }
}
